<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Cocos 速通</title>
      <link href="/posts/62142.html"/>
      <url>/posts/62142.html</url>
      
        <content type="html"><![CDATA[<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>Unity 中常见组件的生命周期函数如下：</p><ul><li><code>OnLoad</code>：对象加载时调用</li><li><code>Start</code>：在第一次帧更新之前调用</li><li><code>Update</code>：每帧调用一次，用于处理逻辑更新</li><li><code>LateUpdate</code>：所有 <code>Update</code> 执行完后调用</li><li><code>OnDisable</code>：当对象被禁用时调用</li><li><code>OnEnable</code>：当对象被启用时调用</li><li><code>OnDestroy</code>：对象销毁时调用</li></ul><blockquote><p><code>this.node</code> 表示当前节点自身（常用于 Cocos Creator 等框架）</p></blockquote><hr><h2 id="输入事件"><a href="#输入事件" class="headerlink" title="输入事件"></a>输入事件</h2><h3 id="鼠标事件类型："><a href="#鼠标事件类型：" class="headerlink" title="鼠标事件类型："></a>鼠标事件类型：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input.EventType.MOUSE_DOWN   <span class="comment">// 鼠标按下</span></span><br><span class="line">Input.EventType.MOUSE_MOVE   <span class="comment">// 鼠标移动</span></span><br><span class="line">Input.EventType.MOUSE_UP     <span class="comment">// 鼠标抬起</span></span><br><span class="line">Input.EventType.MOUSE_WHEEL  <span class="comment">// 鼠标滚轮滚动</span></span><br></pre></td></tr></table></figure><h3 id="触摸事件类型："><a href="#触摸事件类型：" class="headerlink" title="触摸事件类型："></a>触摸事件类型：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input.EventType.TOUCH_START   <span class="comment">// 触摸开始</span></span><br><span class="line">Input.EventType.TOUCH_MOVE    <span class="comment">// 触摸移动</span></span><br><span class="line">Input.EventType.TOUCH_END     <span class="comment">// 触摸结束</span></span><br><span class="line">Input.EventType.TOUCH_CANCEL  <span class="comment">// 触摸取消</span></span><br></pre></td></tr></table></figure><h3 id="监听方法："><a href="#监听方法：" class="headerlink" title="监听方法："></a>监听方法：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Input.<span class="keyword">on</span>(监听类型, 执行函数, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><blockquote><p>⚠️ 注意：开启监听和关闭监听应成对出现，防止内存泄漏<br>示例：<code>Input.off(...)</code> 用于移除监听</p></blockquote><h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3><ul><li><code>@property</code>：用于在编辑器中显示变量（如 Unity 的 <code>[SerializeField]</code> 或 Cocos Creator 的 <code>@property</code> 装饰器）</li></ul><hr><h2 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h2><h3 id="常见触发函数："><a href="#常见触发函数：" class="headerlink" title="常见触发函数："></a>常见触发函数：</h3><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td><code>onTriggerEnter</code></td><td>当碰撞体进入触发区域时调用</td></tr><tr><td><code>onTriggerStay</code></td><td>当碰撞体停留在触发区域内时持续调用</td></tr><tr><td><code>onTriggerExit</code></td><td>当碰撞体离开触发区域时调用</td></tr></tbody></table><p>使用方式：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collider.<span class="keyword">on</span>(<span class="string">&#x27;trigger-type&#x27;</span>, callback, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="场景控制"><a href="#场景控制" class="headerlink" title="场景控制"></a>场景控制</h2><h3 id="重新加载场景："><a href="#重新加载场景：" class="headerlink" title="重新加载场景："></a>重新加载场景：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Director.getInstance().loadScene(<span class="string">&quot;场景名称&quot;</span>);</span><br><span class="line"><span class="comment">// 或者类似写法，具体取决于使用的引擎（如 Cocos Creator）</span></span><br></pre></td></tr></table></figure><hr><h2 id="预制体（Prefab）"><a href="#预制体（Prefab）" class="headerlink" title="预制体（Prefab）"></a>预制体（Prefab）</h2><h3 id="实例化预制体："><a href="#实例化预制体：" class="headerlink" title="实例化预制体："></a>实例化预制体：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Instantiate(预制体); <span class="comment">// 创建一个预制体实例</span></span><br></pre></td></tr></table></figure><hr><h2 id="平滑移动（Tween-动画）"><a href="#平滑移动（Tween-动画）" class="headerlink" title="平滑移动（Tween 动画）"></a>平滑移动（Tween 动画）</h2><h3 id="使用-Tween-实现平滑移动："><a href="#使用-Tween-实现平滑移动：" class="headerlink" title="使用 Tween 实现平滑移动："></a>使用 Tween 实现平滑移动：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">tween</span>(目标对象)</span><br><span class="line">    .<span class="title function_">to</span>(时间, &#123; <span class="attr">position</span>: <span class="keyword">new</span> <span class="title class_">Vec3</span>(x, y, z) &#125;)</span><br><span class="line">    .<span class="title function_">call</span>(<span class="function">() =&gt;</span> &#123;&#125;)  <span class="comment">// 移动完成后执行的回调</span></span><br><span class="line">    .<span class="title function_">start</span>();        <span class="comment">// 启动动画</span></span><br></pre></td></tr></table></figure><hr><h2 id="本地坐标与世界坐标转换"><a href="#本地坐标与世界坐标转换" class="headerlink" title="本地坐标与世界坐标转换"></a>本地坐标与世界坐标转换</h2><h3 id="设置世界坐标："><a href="#设置世界坐标：" class="headerlink" title="设置世界坐标："></a>设置世界坐标：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">节点.setWorldPosition(世界坐标); <span class="comment">// 将节点设置到指定的世界坐标位置</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL</title>
      <link href="/posts/27630.html"/>
      <url>/posts/27630.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 基础汇总：</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Set自动升序排列、自动去重  </span><br><span class="line"><span class="bullet">-</span> pair  </span><br><span class="line"></span><br><span class="line"><span class="code">```cpp</span></span><br><span class="line"><span class="code">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="code">#include &lt;vector&gt;</span></span><br><span class="line"><span class="code">#include &lt;algorithm&gt; // 用于 remove 和 find 函数</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">using namespace std;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// vector的声明</span></span><br><span class="line"><span class="code">vector&lt;int&gt; v1;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// 声明一个二维vector</span></span><br><span class="line"><span class="code">vector&lt;vector&lt;int&gt;&gt; v2;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// vector的快速设置容器大小</span></span><br><span class="line"><span class="code">vector&lt;vector&lt;int&gt;&gt; v1(10); // 设置容器大小为10</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// 设置vector的容器大小</span></span><br><span class="line"><span class="code">v1.resize(10);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// vector迭代器的声明</span></span><br><span class="line"><span class="code">vector&lt;int&gt;::iterator it = v1.begin();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// 判断一个vector是否为空</span></span><br><span class="line"><span class="code">if (v1.empty()) &#123;</span></span><br><span class="line"><span class="code">    // v1 是空的</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// 拷贝函数</span></span><br><span class="line"><span class="code">v2.assign(v1.begin() + 1, v1.end() - 1);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// 插入</span></span><br><span class="line"><span class="code">// 容器后面添加元素</span></span><br><span class="line"><span class="code">v1.push_back(11);</span></span><br><span class="line"><span class="code">// 容器前面添加元素</span></span><br><span class="line"><span class="code">v1.insert(v1.begin(), 0);</span></span><br><span class="line"><span class="code">// 容器中某个位置插入元素</span></span><br><span class="line"><span class="code">v1.insert(v1.begin() + 5, 100);</span></span><br><span class="line"><span class="code">// 让一个vector的一个[num,num)的数插入到另一个vector</span></span><br><span class="line"><span class="code">v1.insert(v1.begin(), v2.begin() + 1, v2.end() - 2);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// 删除</span></span><br><span class="line"><span class="code">v1.erase(v1.begin());</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// 查找</span></span><br><span class="line"><span class="code">// 注意：vector没有直接的find方法，需要使用algorithm中的find函数</span></span><br><span class="line"><span class="code">auto it = find(v1.begin(), v1.end(), 3);</span></span><br><span class="line"><span class="code">if (it != v1.end()) &#123;</span></span><br><span class="line"><span class="code">    // 找到了元素3</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// 删除容器里所有的特定数字</span></span><br><span class="line"><span class="code">v1.erase(remove(v1.begin(), v1.end(), 3), v1.end());</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// 用迭代器</span></span><br><span class="line"><span class="code">for (it = v1.begin(); it != v1.end(); ++it) &#123;</span></span><br><span class="line"><span class="code">    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// 用for循环</span></span><br><span class="line"><span class="code">for (int i = 0; i &lt; v1.size(); ++i) &#123;</span></span><br><span class="line"><span class="code">    cout &lt;&lt; v1[i] &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// 声明二维vector循环遍历</span></span><br><span class="line"><span class="code">vector&lt;vector&lt;int&gt;&gt; v3 = &#123; &#123;1,2,3&#125;, &#123;4,5,6&#125;, &#123;7,8,9&#125; &#125;;</span></span><br><span class="line"><span class="code">for (vector&lt;int&gt;&amp; row : v3) &#123;</span></span><br><span class="line"><span class="code">    for (int&amp; col : row) &#123;</span></span><br><span class="line"><span class="code">        cout &lt;&lt; col &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    cout &lt;&lt; endl;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">// C++11的写法</span></span><br><span class="line"><span class="code">for (const auto&amp; row : v3) &#123;</span></span><br><span class="line"><span class="code">    for (const auto&amp; col : row) &#123;</span></span><br><span class="line"><span class="code">        cout &lt;&lt; col &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    cout &lt;&lt; endl;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>关键点说明：</strong></p><ol><li><code>Set</code> 特性：自动排序和去重</li><li><code>pair</code> 用法：未展示具体代码但需注意其二元组特性</li><li>所有vector操作包含：<ul><li>声明与初始化</li><li>大小调整</li><li>迭代器使用</li><li>增删改查操作</li><li>多维vector遍历</li></ul></li><li>特别注意事项：<ul><li>vector没有内置find，需用<code>&lt;algorithm&gt;</code>的find</li><li>删除特定值需配合remove使用</li><li>现代C++推荐使用范围for循环</li></ul></li></ol><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua速通</title>
      <link href="/posts/29402.html"/>
      <url>/posts/29402.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight lua"><figcaption><span>速通</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="comment">-- wp:paragraph --&gt;</span></span><br><span class="line">&lt;p&gt;<span class="comment">-- 单段注释&lt;/p&gt;</span></span><br><span class="line">&lt;!<span class="comment">-- /wp:paragraph --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!<span class="comment">-- wp:paragraph --&gt;</span></span><br><span class="line">&lt;p&gt;<span class="comment">--[[多段注释]]</span><span class="comment">--&lt;/p&gt;</span></span><br><span class="line">&lt;!<span class="comment">-- /wp:paragraph --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!<span class="comment">-- wp:paragraph --&gt;</span></span><br><span class="line">&lt;p&gt;一个汉字占<span class="number">3</span>个字符：a = <span class="string">&#x27;abc字符串&#x27;</span> #a = <span class="number">12</span>&lt;/p&gt;</span><br><span class="line">&lt;!<span class="comment">-- /wp:paragraph --&gt;</span></span><br><span class="line"></span><br><span class="line">### lua中的数据类型</span><br><span class="line"></span><br><span class="line">&lt;!<span class="comment">-- wp:paragraph --&gt;</span></span><br><span class="line">&lt;p&gt;数字number 、 字符串<span class="built_in">string</span> 、布尔boollean 、 空<span class="literal">nil</span>&lt;/p&gt;</span><br><span class="line">&lt;!<span class="comment">-- /wp:paragraph --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!<span class="comment">-- wp:paragraph --&gt;</span></span><br><span class="line">&lt;p&gt;函数<span class="function"><span class="keyword">function</span> 、 表<span class="title">table</span> 、数据结构 <span class="title">userdata</span>、 协同程序<span class="title">thread</span>&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="function">&lt;!<span class="comment">-- /wp:paragraph --&gt;</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">### 三目运算符<span class="params">(模拟)</span></span></span><br><span class="line"></span><br><span class="line">&lt;!<span class="comment">-- wp:paragraph --&gt;</span></span><br><span class="line">&lt;p&gt;(<span class="number">1</span> &gt; <span class="number">2</span>) <span class="keyword">and</span> <span class="string">&quot;1大于2&quot;</span> <span class="keyword">or</span> <span class="string">&quot;1不大于2&quot;</span>&lt;/p&gt;</span><br><span class="line">&lt;!<span class="comment">-- /wp:paragraph --&gt;</span></span><br><span class="line"></span><br><span class="line">### 循环</span><br><span class="line"></span><br><span class="line">#### <span class="keyword">while</span>循环</span><br><span class="line"></span><br><span class="line">```lua</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">5</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    num = num + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="repeat-until"><a href="#repeat-until" class="headerlink" title="repeat until"></a>repeat until</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    num = num + <span class="number">1</span></span><br><span class="line"><span class="keyword">until</span> num &gt; <span class="number">10</span> <span class="comment">--满足条件跳出</span></span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span> <span class="keyword">do</span> <span class="comment">--默认每次递增1</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><!-- wp:paragraph --><p>没有函数的重载</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>形参，多了少了不会报错，可以用多个临时变量接取</p><!-- /wp:paragraph --><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloWorld</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="table表"><a href="#table表" class="headerlink" title="table表"></a>table表</h3><!-- wp:paragraph --><p>推荐用pairs</p><!-- /wp:paragraph --><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--迭代器索引表通过ipairs()函数来迭代，中间断了就无法遍历出后面的内容</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(arr) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i, v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--迭代器通过pairs()来遍历所有的键值对，可以得到所有的信息</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="用table实现类"><a href="#用table实现类" class="headerlink" title="用table实现类"></a>用table实现类</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">    name = <span class="string">&quot;xuzhuo&quot;</span>,</span><br><span class="line">    age = <span class="number">20</span>,</span><br><span class="line">    gender = <span class="string">&quot;male&quot;</span>,</span><br><span class="line">    fun = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;My name is &quot;</span> .. student.name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">--函数的第三种声明方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">student:speek</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My name is &quot;</span> .. <span class="built_in">self</span>.name)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>点和冒号的区别：冒号在访问函数的时候，会将自己当作第一个参数传入进去</p></blockquote><h3 id="多脚本执行"><a href="#多脚本执行" class="headerlink" title="多脚本执行"></a>多脚本执行</h3><h4 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h4><!-- wp:paragraph --><p>a = 10 全局变量</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>local c = "aaaa" 局部变量</p><!-- /wp:paragraph --><h4 id="多脚本执行-1"><a href="#多脚本执行-1" class="headerlink" title="多脚本执行"></a>多脚本执行</h4><!-- wp:paragraph --><p>require("对应的脚本")</p><!-- /wp:paragraph --><h4 id="卸载脚本"><a href="#卸载脚本" class="headerlink" title="卸载脚本"></a>卸载脚本</h4><!-- wp:paragraph --><p>package.loaded["text"] = nil</p><!-- /wp:paragraph --><h4 id="大G表"><a href="#大G表" class="headerlink" title="大G表"></a>大G表</h4><!-- wp:paragraph --><p>所有的全局变量都以键值对的形式存在于大G表中 _G</p><!-- /wp:paragraph --><h3 id="特殊用法"><a href="#特殊用法" class="headerlink" title="特殊用法"></a>特殊用法</h3><h4 id="多变量赋值"><a href="#多变量赋值" class="headerlink" title="多变量赋值"></a>多变量赋值</h4><h4 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">a, b, c = test()</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br></pre></td></tr></table></figure><h4 id="and-or"><a href="#and-or" class="headerlink" title="and or"></a>and or</h4><!-- wp:paragraph --><p>--在lua中只有 uil 和 false才是假</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>--<strong>短路</strong>：对于and来说 有假则假 对于or来说 有真则真</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>--所以 它们只要判断出第一个 是否满足 就会停止计算了</p><!-- /wp:paragraph --><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><!-- wp:paragraph --><p>协程的本质是一个线程</p><!-- /wp:paragraph --><h4 id="协程创建"><a href="#协程创建" class="headerlink" title="协程创建"></a>协程创建</h4><!-- wp:paragraph --><p>1.coroutine.create(函数)  返回值是一个thread对象</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>2.coroutine.wrap(函数)  返回值 一个函数</p><!-- /wp:paragraph --><h4 id="协程的运行"><a href="#协程的运行" class="headerlink" title="协程的运行"></a>协程的运行</h4><!-- wp:paragraph --><p>coroutine.resume(协程对象)</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>直接调用函数（用wrap创建的）</p><!-- /wp:paragraph --><h4 id="协程挂起"><a href="#协程挂起" class="headerlink" title="协程挂起"></a>协程挂起</h4><!-- wp:paragraph --><p>&nbsp;coroutine.yield(返回值)</p><!-- /wp:paragraph --><h4 id="协程状态"><a href="#协程状态" class="headerlink" title="协程状态"></a>协程状态</h4><!-- wp:paragraph --><p>coroutine.status(协程或者协程函数)</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>--dead表示协程已经执行完毕，没有挂起的状态</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>--suspended表示协程正在挂起，没有执行完毕的状态</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>--running表示协程正在执行的状态</p><!-- /wp:paragraph --><h3 id="元表"><a href="#元表" class="headerlink" title="元表"></a>元表</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><!-- wp:paragraph --><p>--任何表变量都可以有自己的元表(爸爸)</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>--当我们子表中进行特定操作时，会执行元表中的方法</p><!-- /wp:paragraph --><h4 id="设置元表"><a href="#设置元表" class="headerlink" title="设置元表"></a>设置元表</h4><!-- wp:paragraph --><p>--第一个参数子表、第二个参数元表（爸爸）</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>setmetatable(MyTable, meta)</p><!-- /wp:paragraph --><h4 id="特定操作"><a href="#特定操作" class="headerlink" title="特定操作"></a>特定操作</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">meta = &#123;</span><br><span class="line">    <span class="comment">-- __index当成子表中 找不到某一个属性时</span></span><br><span class="line">    <span class="comment">-- 会到元表中 __index中找</span></span><br><span class="line">    <span class="built_in">__index</span> = &#123;</span><br><span class="line">        age = <span class="number">190</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- __newindex 当赋值时，如果赋值一个不存在的索引</span></span><br><span class="line">    <span class="comment">-- 那么就会把这个值赋值到newindex所指的表中，不会修改自己原有的表</span></span><br><span class="line">    <span class="built_in">__newindex</span> = &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">--把子表当成字符串打印</span></span><br><span class="line">    <span class="built_in">__tostring</span> = <span class="function"><span class="keyword">function</span><span class="params">(str)</span></span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是爸爸：&quot;</span> .. str.name</span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">--把子表当成函数使用就会调用__call方法</span></span><br><span class="line">    <span class="built_in">__call</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我是爸爸，我正在给你打电话...&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">--运算符重载</span></span><br><span class="line">    <span class="built_in">__add</span> = <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span></span></span><br><span class="line">        <span class="keyword">return</span> a.name + b.name</span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">    <span class="built_in">__sub</span> = <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span></span></span><br><span class="line">        <span class="keyword">return</span> a.name - b.name</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- wp:paragraph --><p>--rawset 该方法会忽略newindex的设置，只会该自己的变量</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>rawset(MyTable, "age", 180)</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>print(MyTable.age)</p><!-- /wp:paragraph --><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><!-- wp:paragraph --><p>1.表就是类的表现方法</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>2.修改创建出来的成岩变量时，就为了这个空表对象新建了一个成员属性</p><!-- /wp:paragraph --><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Object:subClass</span><span class="params">(className)</span></span></span><br><span class="line">    <span class="comment">--在大G表中创建子类</span></span><br><span class="line">    <span class="built_in">_G</span>[className] = &#123;&#125;</span><br><span class="line">    <span class="comment">--获取引用</span></span><br><span class="line">    <span class="keyword">local</span> subClass = <span class="built_in">_G</span>[className]</span><br><span class="line">    <span class="comment">--记录父类</span></span><br><span class="line">    subClass.base = <span class="built_in">self</span></span><br><span class="line">    <span class="comment">--设置__index</span></span><br><span class="line">    subClass.<span class="built_in">__index</span> = subClass</span><br><span class="line">    <span class="comment">--继承父类</span></span><br><span class="line">    <span class="built_in">setmetatable</span>(subClass, &#123; <span class="built_in">__index</span> = <span class="built_in">self</span> &#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Object:new</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">--创建对象</span></span><br><span class="line">    <span class="keyword">local</span> obj = &#123;&#125;</span><br><span class="line">    <span class="comment">--设置__index</span></span><br><span class="line">    <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">    <span class="comment">--继承父类</span></span><br><span class="line">    <span class="built_in">setmetatable</span>(obj, <span class="built_in">self</span>)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>setmetatable(subClass, &#123; __index = self &#125;)</code> 用于子类的继承，通过一个新元表实现当子类查找不到属性时，到父类中查找；</p><p><code>setmetatable(obj, self)</code> 用于实例化对象，直接将类作为元表，使对象继承类的方法和属性（前提是类中要设置好 <code>__index</code>）。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>直接重写方法</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GameObject:move</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">self</span>.Posx = <span class="built_in">self</span>.Posx + <span class="number">1</span></span><br><span class="line">    <span class="built_in">self</span>.Posy = <span class="built_in">self</span>.Posy + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;GameObject move to:&quot;</span>, <span class="built_in">self</span>.Posx, <span class="built_in">self</span>.Posy)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">GameObject:subClass(<span class="string">&quot;Player&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--子类重写方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player:move</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">self</span>.base.move(<span class="built_in">self</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="自带库"><a href="#自带库" class="headerlink" title="自带库"></a>自带库</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--时间</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">time</span>())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">time</span> &#123; year = <span class="number">2021</span>, month = <span class="number">3</span>, day = <span class="number">25</span>, hour = <span class="number">13</span>, <span class="built_in">min</span> = <span class="number">30</span>, sec = <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">--数学</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">abs</span>(<span class="number">-10</span>))           <span class="comment">--绝对值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">deg</span>(<span class="built_in">math</span>.<span class="built_in">pi</span> / <span class="number">2</span>))   <span class="comment">--弧度转角度制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">cos</span>(<span class="built_in">math</span>.<span class="built_in">pi</span> / <span class="number">4</span>))   <span class="comment">--三角函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">floor</span>(<span class="number">2.6</span>))         <span class="comment">--向下取整</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">ceil</span>(<span class="number">2.4</span>))          <span class="comment">--向上取整</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)) <span class="comment">--最大值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">min</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)) <span class="comment">--最小值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">random</span>())           <span class="comment">--随机数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">1</span>, <span class="number">10</span>))      <span class="comment">--指定范围随机数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">sqrt</span>(<span class="number">9</span>))            <span class="comment">--平方根</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">&quot;hello&quot;</span>))      <span class="comment">--字符转ASCII码</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">char</span>(<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>))   <span class="comment">--ASCII码转字符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">len</span>(<span class="string">&quot;hello&quot;</span>))       <span class="comment">--字符串长度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">lower</span>(<span class="string">&quot;HELLO&quot;</span>))     <span class="comment">--转小写</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">upper</span>(<span class="string">&quot;hello&quot;</span>))     <span class="comment">--转大写</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">rep</span>(<span class="string">&quot;hello&quot;</span>, <span class="number">3</span>))    <span class="comment">--重复字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">sub</span>(<span class="string">&quot;hello&quot;</span>, <span class="number">2</span>, <span class="number">4</span>)) <span class="comment">--截取字符串</span></span><br></pre></td></tr></table></figure><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><!-- wp:paragraph --><p>collectgarbage("count")  --获取当前lua占用的内存</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>collectgarbage("collect") -- 启动一次自动的垃圾回收</p>```]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity 基础</title>
      <link href="/posts/3083.html"/>
      <url>/posts/3083.html</url>
      
        <content type="html"><![CDATA[<h1 id="Unity-基础"><a href="#Unity-基础" class="headerlink" title="Unity 基础"></a>Unity 基础</h1><h2 id="Mathf"><a href="#Mathf" class="headerlink" title="Mathf"></a>Mathf</h2><p><code>Mathf.PI</code>圆周率</p><p><code>Mathf.Abs()</code>绝对值</p><p><code>Mathf.CeilToInt()</code>向上取整（不是4舍5入）</p><p><code>Mathf.FloorToInt()</code>向下取整（不是4舍5入）</p><p><code>Mathf.Clamp(10，11，20)</code>钳形函数（第一个数和后面两个数进行比较，小于后面最小的数取最小数，大于同理，在他们之间则取本身）</p><p><code>Mathf.Max(1,23,4)</code>最大值</p><p><code>Mathf.Min()</code>最小值</p><p><code>Mathf.Pow(2,3);</code>谁的几次方</p><p><code>Mathf.RoundToint()</code>四舍五入</p><p><code>Mathf.Sqrt()</code>平方根</p><p><code>Mathf.IsPowerOfTwo()</code>判断一个数是不是2的n次幂</p><p><code>Mathf.Sign()</code>判断一个数是不是正数（正数返回1负数返回-1）</p><p><code>Mathf.Lerp(start,10,Time.deltaTime)</code>插值运算Lerp</p><h2 id="Mathf之三角函数"><a href="#Mathf之三角函数" class="headerlink" title="Mathf之三角函数"></a>Mathf之三角函数</h2><h3 id="角度和弧度的转换关系"><a href="#角度和弧度的转换关系" class="headerlink" title="角度和弧度的转换关系"></a>角度和弧度的转换关系</h3><p>1rad &#x3D; 57.3° 1° &#x3D; 0.01745rad</p><p><code>Mathf.Rad2Deg</code>弧度转角度</p><p><code>Mathf.Deg2Rad</code>角度转弧度</p><h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><p><code>Mathf.Sin()</code>传入的是弧度角</p><p><code>Mathf.Cos()</code></p><h3 id="反三角函数（正弦或余弦对应的弧度）"><a href="#反三角函数（正弦或余弦对应的弧度）" class="headerlink" title="反三角函数（正弦或余弦对应的弧度）"></a>反三角函数（正弦或余弦对应的弧度）</h3><p><code>Mathf.Asin()</code></p><h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><p>世界坐标系：顾名思义</p><p>物体坐标系：建模时的坐标系，在unity中可以理解为本地坐标系</p><p>屏幕坐标系：1920：1080从屏幕的坐下角为zero</p><p>视口坐标系：将屏幕坐标系的长宽转换成0~1</p><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>两点确定一个向量，终点减起点</p><p><code>Vector3(2,3,2).magnitude</code>模长</p><p><code>Vector3(2,3,2)</code>.normalized单位向量</p><h2 id="点乘-Dot"><a href="#点乘-Dot" class="headerlink" title="点乘(Dot)"></a>点乘(Dot)</h2><p>几何意义：可以得到一个向量在自己向量上的投影</p><p>作用：可以用这个规律来实现敌人的大致判断方位</p><p>A(Xa,Ya,Za) B(Xb,Yb,Zb)</p><p>A·B &#x3D; Xa<em>Xb + Ya</em>Yb + Za*Zb（标量）</p><p>点成的结果：&gt;0锐角 &#x3D;0直角 &lt;0钝角</p><p><code>Vecrot3.Dot(transform.forword,targeObject.transform.postion - transform.postion)</code>;</p><p><code>Vector3.Angle();</code>计算两个角之间的夹角</p><h2 id="叉乘-Cross"><a href="#叉乘-Cross" class="headerlink" title="叉乘(Cross)"></a>叉乘(Cross)</h2><p>几何意义：法向量</p><p>作用：判断敌人的左右</p><p><code>Vector3.Cross();</code></p><h2 id="向量插值运算（Lerp）"><a href="#向量插值运算（Lerp）" class="headerlink" title="向量插值运算（Lerp）"></a>向量插值运算（Lerp）</h2><p><code>Vector3.Lerp(StartPos,target,time);</code></p><h2 id="球形插值（Slerp）"><a href="#球形插值（Slerp）" class="headerlink" title="球形插值（Slerp）"></a>球形插值（Slerp）</h2><p><code>Vector3.Slerp(StartPos,target,time);</code></p><h2 id="欧拉角（Rotation"><a href="#欧拉角（Rotation" class="headerlink" title="欧拉角（Rotation)"></a>欧拉角（Rotation)</h2><p>X-Y-Z</p><p>为什么有万向锁死：欧拉角描述相对于初始状态的变换，只和最终状态有关，与过程无关。</p><p>可以简单的认为中间的y轴旋转90°后两个轴重合，失去一个自由度</p><h2 id="四元数"><a href="#四元数" class="headerlink" title="四元数"></a>四元数</h2><p><code>Quaternion.AngleAxis()</code>旋转角度轴（20，Vector.up）</p><p><code>Quaternion.Slerp()</code>对旋转角度进行插值运算(transform.postion,target.postion,Time.daletime)</p><p><code>Quaternion.LookRotation()</code>将一个向量转换成四元数旋转角度</p><h3 id="四元数-四元数"><a href="#四元数-四元数" class="headerlink" title="四元数 * 四元数"></a>四元数 * 四元数</h3><p>两个四元数相乘得到一个新的四元数，代表两个旋转量的叠加，相当于旋转（相对于自身坐标系）</p><p>例如：transform.postion.rotation *&#x3D; p1（旋转p1角度）</p><h3 id="四元数-向量"><a href="#四元数-向量" class="headerlink" title="四元数 * 向量"></a>四元数 * 向量</h3><p>将向量旋转，返回的是旋转的向量</p><h2 id="延迟函数"><a href="#延迟函数" class="headerlink" title="延迟函数"></a>延迟函数</h2><p><code>Invoke(&quot;function&quot;,2);</code></p><p><code>InvokeRepeating(&quot;function&quot;,2,1);</code>两秒后，每隔一秒执行一次</p><p><code>CancelInvoke();</code>取消延迟函数</p><h2 id="范围检测"><a href="#范围检测" class="headerlink" title="范围检测"></a>范围检测</h2><p>作用：一瞬间碰撞检测，没有真的生成碰撞体，攻击检测</p><p>Physics.OverlapBox(Vector3.zero,Vector3.one,Quaternion.AngleAxis(45,Vector3.up),1&lt;&lt;LayerMask.NameToLayer(“UI”)) </p><p>参数1：检测位置</p><p>参数2：检测的大小</p><p>参数3：检测旋转</p><p>参数4：检测的层级</p><p>知识点（层级左移）：在unity中的层级一共有0 - 31层对应的int类型的32位，一一对应</p><h2 id="射线检测"><a href="#射线检测" class="headerlink" title="射线检测"></a>射线检测</h2><p>RaycastHit2D.Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask)</p><p>参数1：起始位置</p><p>参数2：检测方向</p><p>参数3：检测距离</p><p>参数4：检测的层级</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity 入门</title>
      <link href="/posts/26403.html"/>
      <url>/posts/26403.html</url>
      
        <content type="html"><![CDATA[<h1 id="GameObject"><a href="#GameObject" class="headerlink" title="GameObject"></a>GameObject</h1><h2 id="成员变量："><a href="#成员变量：" class="headerlink" title="成员变量："></a>成员变量：</h2><ul><li><code>gameObject.name</code> 名字</li><li><code>gameObject.activeSelf</code> 激活状态</li><li><code>gameObject.isStatic</code> 静态状态</li><li><code>gameObject.layer</code> 层级</li><li><code>gameObject.tag</code> 标签</li><li><code>gameObject.transform.position</code> 位置</li></ul><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><ul><li><code>GameObject.CreatePrimitive(PrimitiveType.Cube);</code> &#x2F;&#x2F; 创建一个Cube类型的物体，返回一个GameObject。</li></ul><h3 id="查找单个对象"><a href="#查找单个对象" class="headerlink" title="查找单个对象"></a>查找单个对象</h3><p>无法找到失活的对象，多个满足条件的对象时返回不确定的对象，所以应确保唯一性。</p><ul><li><code>GameObject.Find(&quot;&quot;);</code> &#x2F;&#x2F; 根据名字查找（效率低）</li><li><code>GameObject.FindWithTag(&quot;&quot;);</code> &#x2F;&#x2F; 根据tag查找</li></ul><h3 id="查找多个对象"><a href="#查找多个对象" class="headerlink" title="查找多个对象"></a>查找多个对象</h3><ul><li><code>GameObject[] objs = GameObject.FindGameObjectsWithTag(&quot;Player&quot;);</code></li><li><code>findtag mytag = GameObject.FindObjectOfType&lt;findtag&gt;();</code> &#x2F;&#x2F; 效率较低，要遍历所有对象及其脚本</li></ul><h3 id="实例化对象（克隆）"><a href="#实例化对象（克隆）" class="headerlink" title="实例化对象（克隆）"></a>实例化对象（克隆）</h3><ul><li><code>Instantiate(obj);</code></li></ul><h3 id="删除对象"><a href="#删除对象" class="headerlink" title="删除对象"></a>删除对象</h3><ul><li><code>GameObject.Destroy(obj, 5);</code> &#x2F;&#x2F; 延迟几秒删除</li><li><code>Destroy(this);</code> &#x2F;&#x2F; 删除脚本</li><li><code>DontDestroyOnLoad(gameObject);</code> &#x2F;&#x2F; 过场景不被删除</li></ul><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><h3 id="创建一个空物体"><a href="#创建一个空物体" class="headerlink" title="创建一个空物体"></a>创建一个空物体</h3><ul><li><code>GameObject obj = new GameObject();</code></li><li><code>GameObject obj1 = new GameObject(&quot;我新创建物体的名字&quot;);</code> &#x2F;&#x2F; 创建一个名字为”我新创建物体的名字”的物体</li><li><code>GameObject obj2 = new GameObject(&quot;我新创建物体的名字2&quot;, typeof(findtag));</code> &#x2F;&#x2F; 创建一个物体并附加一个脚本</li></ul><h3 id="为对象添加脚本"><a href="#为对象添加脚本" class="headerlink" title="为对象添加脚本"></a>为对象添加脚本</h3><ul><li><code>gameObject.AddComponent&lt;BoxCollider2D&gt;();</code></li></ul><h3 id="标签比较"><a href="#标签比较" class="headerlink" title="标签比较"></a>标签比较</h3><ul><li><code>gameObject.CompareTag(&quot;Player&quot;);</code></li><li><code>gameObject.tag == &quot;Player&quot;;</code></li></ul><h3 id="设置失活"><a href="#设置失活" class="headerlink" title="设置失活"></a>设置失活</h3><ul><li><code>gameObject.SetActive(false);</code></li></ul><h1 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h1><h2 id="时间缩放"><a href="#时间缩放" class="headerlink" title="时间缩放"></a>时间缩放</h2><ul><li><code>Time.timeScale = 0;</code> &#x2F;&#x2F; 时间流速停止</li><li><code>Time.timeScale = 1;</code> &#x2F;&#x2F; 时间流速正常</li><li><code>Time.timeScale = 2;</code> &#x2F;&#x2F; 时间流速倍速</li></ul><h2 id="帧间隔时间"><a href="#帧间隔时间" class="headerlink" title="帧间隔时间"></a>帧间隔时间</h2><ul><li><code>Time.deltaTime</code> &#x2F;&#x2F; 受scale影响</li><li><code>Time.unscaledDeltaTime</code> &#x2F;&#x2F; 不受scale影响</li></ul><h2 id="游戏开始到现在的时间"><a href="#游戏开始到现在的时间" class="headerlink" title="游戏开始到现在的时间"></a>游戏开始到现在的时间</h2><ul><li><code>Time.time</code> &#x2F;&#x2F; 受scale影响</li><li><code>Time.unscaledTime</code> &#x2F;&#x2F; 不受scale影响</li></ul><h2 id="帧数（游戏跑了多少帧）"><a href="#帧数（游戏跑了多少帧）" class="headerlink" title="帧数（游戏跑了多少帧）"></a>帧数（游戏跑了多少帧）</h2><ul><li><code>Time.frameCount</code></li></ul><h1 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h1><h2 id="位置和位移"><a href="#位置和位移" class="headerlink" title="位置和位移"></a>位置和位移</h2><h3 id="创建一个向量"><a href="#创建一个向量" class="headerlink" title="创建一个向量"></a>创建一个向量</h3><ul><li><code>Vector3 v1 = new Vector3(1, 2, 3);</code></li></ul><h3 id="常用的方向向量"><a href="#常用的方向向量" class="headerlink" title="常用的方向向量"></a>常用的方向向量</h3><ul><li><code>Vector3.zero</code> &#x2F;&#x2F; (0, 0, 0)</li><li><code>Vector3.right</code> &#x2F;&#x2F; (1, 0, 0)</li><li><code>Vector3.left</code> &#x2F;&#x2F; (-1, 0, 0)</li><li><code>Vector3.forward</code> &#x2F;&#x2F; (0, 0, 1)</li><li><code>Vector3.back</code> &#x2F;&#x2F; (0, 0, -1)</li><li><code>Vector3.up</code> &#x2F;&#x2F; (0, 1, 0)</li><li><code>Vector3.down</code> &#x2F;&#x2F; (0, -1, 0)</li></ul><h3 id="计算两个点之间的距离"><a href="#计算两个点之间的距离" class="headerlink" title="计算两个点之间的距离"></a>计算两个点之间的距离</h3><ul><li><code>Vector3.Distance(v1, v2);</code></li></ul><h3 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h3><ul><li><code>transform.position</code> &#x2F;&#x2F; 世界坐标系</li><li><code>transform.localPosition</code> &#x2F;&#x2F; 本地坐标系</li><li><code>transform.forward</code> &#x2F;&#x2F; 自身坐标系的面朝向</li></ul><h3 id="位移"><a href="#位移" class="headerlink" title="位移"></a>位移</h3><ul><li><code>transform.Translate(Vector3.forward * 1 * Time.deltaTime, Space.World);</code></li></ul><h2 id="角度和旋转"><a href="#角度和旋转" class="headerlink" title="角度和旋转"></a>角度和旋转</h2><ul><li><code>transform.eulerAngles</code> &#x2F;&#x2F; 世界坐标角度</li><li><code>transform.localEulerAngles</code> &#x2F;&#x2F; 自身坐标系角度</li><li><code>transform.Rotate(new Vector3(0, 10, 0), Space.World);</code> &#x2F;&#x2F; 自转</li><li><code>transform.Rotate(Vector3.zero, 10 * Time.deltaTime, Space.World);</code> &#x2F;&#x2F; 绕轴转</li><li><code>transform.RotateAround(Vector3.zero, Vector3.up, 10 * Time.deltaTime);</code> &#x2F;&#x2F; 绕点转</li></ul><h2 id="缩放看向"><a href="#缩放看向" class="headerlink" title="缩放看向"></a>缩放看向</h2><ul><li><code>transform.lossyScale</code> &#x2F;&#x2F; 相对世界缩放（只读）</li><li><code>transform.localScale</code> &#x2F;&#x2F; 相对父物体缩放</li><li><code>transform.LookAt(Vector3.zero);</code> &#x2F;&#x2F; 看向一个点（世界坐标系）</li><li><code>transform.LookAt(Transform);</code> &#x2F;&#x2F; 看向一个点</li></ul><h2 id="父子关系"><a href="#父子关系" class="headerlink" title="父子关系"></a>父子关系</h2><h3 id="设置父对象"><a href="#设置父对象" class="headerlink" title="设置父对象"></a>设置父对象</h3><ul><li><code>transform.parent = null;</code> &#x2F;&#x2F; 没有父物体</li><li><code>transform.SetParent(GameObject.transform, false);</code> &#x2F;&#x2F; 设置父物体，第二个参数为是否保留世界坐标</li></ul><h3 id="设置子对象为空"><a href="#设置子对象为空" class="headerlink" title="设置子对象为空"></a>设置子对象为空</h3><ul><li><code>transform.DetachChildren();</code> &#x2F;&#x2F; 断绝所有子对象</li></ul><h3 id="获取子对象"><a href="#获取子对象" class="headerlink" title="获取子对象"></a>获取子对象</h3><ul><li><code>transform.Find(&quot;&quot;);</code> &#x2F;&#x2F; 查找所有儿子，能找到失活的对象，找不到孙子</li><li><code>transform.childCount</code> &#x2F;&#x2F; 子对象数量，包括失活对象，找不到孙子</li><li><code>transform.GetChild(i);</code> &#x2F;&#x2F; 获取对应的儿子</li></ul><h3 id="儿子的操作"><a href="#儿子的操作" class="headerlink" title="儿子的操作"></a>儿子的操作</h3><ul><li><code>public Transform son;</code></li><li><code>son.IsChildOf(transform);</code> &#x2F;&#x2F; 判断是否是指定对象的子物体</li><li><code>son.GetSiblingIndex();</code> &#x2F;&#x2F; 获取儿子编号</li><li><code>son.SetAsFirstSibling();</code> &#x2F;&#x2F; 设置为第一个儿子</li><li><code>son.SetAsLastSibling();</code> &#x2F;&#x2F; 设置为最后一个儿子</li><li><code>son.SetSiblingIndex();</code> &#x2F;&#x2F; 设置为指定序列的儿子</li></ul><h2 id="坐标转换"><a href="#坐标转换" class="headerlink" title="坐标转换"></a>坐标转换</h2><h3 id="世界坐标转本地坐标"><a href="#世界坐标转本地坐标" class="headerlink" title="世界坐标转本地坐标"></a>世界坐标转本地坐标</h3><h4 id="点的转换（受缩放影响）"><a href="#点的转换（受缩放影响）" class="headerlink" title="点的转换（受缩放影响）"></a>点的转换（受缩放影响）</h4><ul><li><code>transform.InverseTransformPoint(Vector3.forward);</code></li></ul><h4 id="向量转换"><a href="#向量转换" class="headerlink" title="向量转换"></a>向量转换</h4><ul><li><code>transform.InverseTransformDirection(Vector3.forward);</code> &#x2F;&#x2F; 不受缩放影响</li><li><code>transform.InverseTransformVector(Vector3.forward);</code> &#x2F;&#x2F; 受缩放影响</li></ul><h3 id="本地坐标转世界坐标"><a href="#本地坐标转世界坐标" class="headerlink" title="本地坐标转世界坐标"></a>本地坐标转世界坐标</h3><h4 id="点的转换"><a href="#点的转换" class="headerlink" title="点的转换"></a>点的转换</h4><ul><li><code>transform.TransformPoint(Vector3.forward);</code> &#x2F;&#x2F; 受缩放影响</li></ul><h4 id="方向转换"><a href="#方向转换" class="headerlink" title="方向转换"></a>方向转换</h4><ul><li><code>transform.TransformDirection(Vector3.forward);</code> &#x2F;&#x2F; 不受缩放影响</li><li><code>transform.TransformVector(Vector3.forward);</code> &#x2F;&#x2F; 受缩放影响</li></ul><h1 id="Input和Screen"><a href="#Input和Screen" class="headerlink" title="Input和Screen"></a>Input和Screen</h1><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><h3 id="检测鼠标输入"><a href="#检测鼠标输入" class="headerlink" title="检测鼠标输入"></a>检测鼠标输入</h3><ul><li><code>Input.mousePosition</code></li><li><code>Input.GetMouseButtonDown(0);</code> &#x2F;&#x2F; 按下左键</li><li><code>Input.GetMouseButtonUp(0);</code> &#x2F;&#x2F; 弹起左键</li><li><code>Input.GetMouseButton(0);</code> &#x2F;&#x2F; 长按左键</li><li><code>Input.mouseScrollDelta</code> &#x2F;&#x2F; 滚轮滚动（-1下、0没滚、1上）</li></ul><h3 id="检测键盘输入"><a href="#检测键盘输入" class="headerlink" title="检测键盘输入"></a>检测键盘输入</h3><ul><li><code>Input.GetKeyDown(KeyCode.W);</code> &#x2F;&#x2F; 按下</li><li><code>Input.GetKeyDown(&quot;q&quot;);</code> &#x2F;&#x2F; 按下，必须小写</li><li><code>Input.GetKeyUp(KeyCode.W);</code> &#x2F;&#x2F; 弹起</li><li><code>Input.GetKey(KeyCode.W);</code> &#x2F;&#x2F; 长按</li></ul><h3 id="检测默认轴输入"><a href="#检测默认轴输入" class="headerlink" title="检测默认轴输入"></a>检测默认轴输入</h3><ul><li><code>Input.GetAxis(&quot;Horizontal&quot;);</code></li><li><code>Input.GetAxis(&quot;Vertical&quot;);</code></li><li><code>Input.GetAxis(&quot;Mouse X&quot;);</code></li><li><code>Input.GetAxis(&quot;Mouse Y&quot;);</code></li></ul><blockquote><p>注意：<code>GetAxisRaw</code>没有渐变-1和1，<code>GetAxis</code>有渐变-1到1</p></blockquote><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p><code>Input.anyKeyDown</code>任意键按下</p><p><code>Input.inputString</code>键盘输入</p><h1 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h1><h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><h3 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h3><p><code>Screen.currentResolution.width``Screen.currentResolution.height</code></p><h3 id="窗口分辨率"><a href="#窗口分辨率" class="headerlink" title="窗口分辨率"></a>窗口分辨率</h3><p><code>Screen.width</code></p><h3 id="息屏休眠"><a href="#息屏休眠" class="headerlink" title="息屏休眠"></a>息屏休眠</h3><p><code>Screen.sleepTimeout = SleepTimeout.NeverSleep;</code></p><h2 id="场景（api）"><a href="#场景（api）" class="headerlink" title="场景（api）"></a>场景（api）</h2><p><code>SceneManager.LoadScene(&quot;场景的名字&quot;);</code>场景切换</p><p><code>SceneManager.GetActiveScene</code>;获得激活的场景<br><code>Application.Quit();</code>退出游戏</p><h1 id="Camera"><a href="#Camera" class="headerlink" title="Camera"></a>Camera</h1><p><code>Camera.main</code>获取主摄像机</p><p><code>Camera.allCameraCount</code>获取摄像机的数量</p><p><code>Camera.main.WorldToScreenPoint()</code>世界坐标转屏幕坐标（x,y是根据屏幕坐标系物体的位置，z是物体距离摄像机的距离）</p><p><code>Camera.main.ScreenToWorldPoint()</code>屏幕坐标转世界坐标</p><h1 id="物理系统之碰撞检测"><a href="#物理系统之碰撞检测" class="headerlink" title="物理系统之碰撞检测"></a>物理系统之碰撞检测</h1><p><code>private void OnCollisionEnter(Collision collision)&#123;&#125;</code>接触时执行<br><code>private void OnCollisionExit(Collision collision)&#123;&#125;</code>离开时执行<br><code>private void OnCollisionStay(Collision collision)&#123;&#125;</code>持续碰撞执行<br><code>private void OnTriggerEnter(Collider other)&#123;&#125;</code>同理</p><h2 id="添加力"><a href="#添加力" class="headerlink" title="添加力"></a>添加力</h2><p><code>private RigidBody rb;</code><br><code>rb.AddForce();</code>世界坐标<br><code>rb.AddRelativeForce();</code>相对坐标系</p><h2 id="扭矩力-旋转"><a href="#扭矩力-旋转" class="headerlink" title="扭矩力(旋转)"></a>扭矩力(旋转)</h2><p><code>rb.AddTorque();</code>世界坐标<br><code>rb.AddRelativeTorque();</code>本地坐标</p><h2 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h2><p><code>rb.velocity();</code>世界坐标</p><h2 id="爆炸力"><a href="#爆炸力" class="headerlink" title="爆炸力"></a>爆炸力</h2><p><code>rb.AddExplosionForce(100,Vector.zero,10);</code>1.力的大小2.力的位置3.力的半径</p><h2 id="刚体的休眠-unity为了节约性能"><a href="#刚体的休眠-unity为了节约性能" class="headerlink" title="刚体的休眠(unity为了节约性能)"></a>刚体的休眠(unity为了节约性能)</h2><p><code>rb.IsSleeping();</code><br><code>rb.WakeUp();</code></p><h1 id="音效"><a href="#音效" class="headerlink" title="音效"></a>音效</h1><h2 id="代码控制音效"><a href="#代码控制音效" class="headerlink" title="代码控制音效"></a>代码控制音效</h2><p><code>public AudioSource audioSource;</code><br><code>audioSource.Play();</code>播放音乐<br><code>audioSource.Stop();</code>暂停播放<br><code>audioSource.Pause();</code>暂停<br><code>audioSource.isPlaying</code>是否正在播放</p><h1 id="其它-1"><a href="#其它-1" class="headerlink" title="其它"></a>其它</h1><h2 id="鼠标的相关设置"><a href="#鼠标的相关设置" class="headerlink" title="鼠标的相关设置"></a>鼠标的相关设置</h2><p><code>Cursor.visible = false;</code>隐藏鼠标<br><code>Cursor.lockState = CursorLockMode.Confined;</code>锁定鼠标(None不锁定Locked锁定在屏幕中心+隐藏Confined限制在窗口范围内)<br><code>Cursor.SetCursor(tex,Vector2.zero,CursorMode.Auto);</code>设置鼠标的图片</p><p>参数一：光标的图片 参数二：偏移位置 参数三：光标模式</p><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><p><code>Random.range(0,100);</code>左开右闭<br><code>Random.range(0.2f,2.3f);</code>左开右开</p><h2 id="Unity的自带委托"><a href="#Unity的自带委托" class="headerlink" title="Unity的自带委托"></a>Unity的自带委托</h2><p>Learning不会思密达</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity 持久化储存</title>
      <link href="/posts/22073.html"/>
      <url>/posts/22073.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">### LitJosn</span></span><br><span class="line"></span><br><span class="line">`<span class="keyword">using</span> LitJson` 引入命名空间</span><br><span class="line"></span><br><span class="line"><span class="meta">#### 序列化</span></span><br><span class="line"></span><br><span class="line">```csharp</span><br><span class="line"><span class="built_in">string</span> Json = JsonMapper.ToJson(lineList);</span><br><span class="line">File.WriteAllText(Application.persistentDataPath + <span class="string">&quot;/save.json&quot;</span>, Json);</span><br></pre></td></tr></table></figure><p><code>lineList</code> 是要序列化的对象</p><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> data = File.ReadAllText(Application.persistentDataPath + <span class="string">&quot;/save.json&quot;</span>);</span><br><span class="line">List&lt;List&lt;<span class="built_in">int</span>&gt;&gt; Data = JsonMapper.ToObject&lt;List&lt;List&lt;<span class="built_in">int</span>&gt;&gt;&gt;(data);</span><br></pre></td></tr></table></figure><p><code>lineList</code> 是什么类型就用什么类型接收，例如这里用 <code>List&lt;List&lt;int&gt;&gt;</code> 接收</p><h3 id="JsonUnity"><a href="#JsonUnity" class="headerlink" title="JsonUnity"></a>JsonUnity</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File.WriteAllText写出文件、File.ReadAllText读入文件、JsonUtility.ToJson(obj)、JsonUtility.FromJson&lt;T&gt;(json)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Save</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    StartData startData = <span class="keyword">new</span> StartData();</span><br><span class="line">    <span class="built_in">string</span> json = JsonUtility.ToJson(startData); <span class="comment">// 将StartData对象转化为json字符串</span></span><br><span class="line">    File.WriteAllText(Application.persistentDataPath + <span class="string">&quot;/StartData.json&quot;</span>, json); <span class="comment">// 将json字符串写入文件中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Read</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> json = File.ReadAllText(Application.persistentDataPath + <span class="string">&quot;/StartData.json&quot;</span>); <span class="comment">// 读取文件中的json字符串</span></span><br><span class="line">    StartData startData = JsonUtility.FromJson&lt;StartData&gt;(json); <span class="comment">// 将json字符串转化为StartData对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>float 序列化可能存在微小误差（不影响使用）</li><li>自定义类需添加序列化标记 <code>[System.Serializable]</code></li><li>序列化私有变量需添加 <code>[SerializeField]</code></li><li>不支持字典类型</li><li>存储的 null 对象会被转换为默认类型值</li></ol><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>参数传递：ref 和 out</title>
      <link href="/posts/26480.html"/>
      <url>/posts/26480.html</url>
      
        <content type="html"><![CDATA[<p>以下是你提供的 HTML 片段内容转换成 Markdown 格式后的版本：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### C# 参数传递：ref 和 out</span></span><br><span class="line"></span><br><span class="line">在 C# 中，普通参数传递是按值传递的，这意味着在函数内部对参数的修改不会影响到函数外部的变量。为了在函数内部修改外部变量的值，我们可以使用 <span class="code">`ref`</span> 和 <span class="code">`out`</span> 关键字。以下是它们的用法和区别：</span><br><span class="line"></span><br><span class="line"><span class="section">#### 按值传递示例</span></span><br><span class="line"></span><br><span class="line"><span class="code">```csharp</span></span><br><span class="line"><span class="code">static void Main(string[] args)</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    int b = 5;</span></span><br><span class="line"><span class="code">    ChangeValue(b);</span></span><br><span class="line"><span class="code">    Console.WriteLine(b);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">static void ChangeValue(int a)</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    a = 10;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line">在这个示例中，虽然在 <span class="code">`ChangeValue`</span> 方法中修改了参数 <span class="code">`a`</span> 的值，但 <span class="code">`Main`</span> 方法中的变量 <span class="code">`b`</span> 并没有受到影响。</span><br><span class="line"></span><br><span class="line"><span class="section">#### 使用 ref 关键字</span></span><br><span class="line"></span><br><span class="line"><span class="code">`ref`</span> 关键字用于按引用传递参数，使得在函数内部的修改能够影响到函数外部的变量。</span><br><span class="line"></span><br><span class="line"><span class="code">```csharp</span></span><br><span class="line"><span class="code">static void Main(string[] args)</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    int b = 5;</span></span><br><span class="line"><span class="code">    ChangeRef(ref b);</span></span><br><span class="line"><span class="code">    Console.WriteLine(b);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">static void ChangeRef(ref int a)</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    a = 10;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line">在这个示例中，<span class="code">`ref`</span> 关键字使得 <span class="code">`ChangeRef`</span> 方法内部对参数 <span class="code">`a`</span> 的修改能够反映到 <span class="code">`Main`</span> 方法中的变量 <span class="code">`b`</span> 上。</span><br><span class="line"></span><br><span class="line"><span class="section">#### 使用 out 关键字</span></span><br><span class="line"></span><br><span class="line"><span class="code">`out`</span> 关键字与 <span class="code">`ref`</span> 类似，但主要用于方法返回多个值的情况。</span><br><span class="line"></span><br><span class="line"><span class="code">```csharp</span></span><br><span class="line"><span class="code">static void Main(string[] args)</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    int b;</span></span><br><span class="line"><span class="code">    ChangeOut(out b);</span></span><br><span class="line"><span class="code">    Console.WriteLine(b);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">static void ChangeOut(out int a)</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    a = 10;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line">在这个示例中，使用 <span class="code">`out`</span> 关键字允许在函数内部对未初始化的变量进行赋值，并将该值传回到函数外部。</span><br><span class="line"></span><br><span class="line"><span class="section">#### ref 和 out 的区别</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> <span class="strong">**初始化要求：**</span></span><br><span class="line"><span class="bullet">   -</span> <span class="code">`ref`</span> 参数在传递前必须初始化。</span><br><span class="line"><span class="bullet">   -</span> <span class="code">`out`</span> 参数在传递前不需要初始化。</span><br><span class="line"><span class="bullet">2.</span> <span class="strong">**赋值要求：**</span></span><br><span class="line"><span class="bullet">   -</span> <span class="code">`ref`</span> 参数在方法内部不要求必须赋值。</span><br><span class="line"><span class="bullet">   -</span> <span class="code">`out`</span> 参数在方法内部必须赋值。</span><br><span class="line"></span><br><span class="line"><span class="section">### 示例代码总结</span></span><br><span class="line"></span><br><span class="line"><span class="code">```csharp</span></span><br><span class="line"><span class="code">class Program</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    static void Main(string[] args)</span></span><br><span class="line"><span class="code">    &#123;</span></span><br><span class="line"><span class="code">        int b = 5;</span></span><br><span class="line"><span class="code">        ChangeRef(ref b);</span></span><br><span class="line"><span class="code">        Console.WriteLine(b);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        int c;</span></span><br><span class="line"><span class="code">        ChangeOut(out c);</span></span><br><span class="line"><span class="code">        Console.WriteLine(c);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    static void ChangeRef(ref int a)</span></span><br><span class="line"><span class="code">    &#123;</span></span><br><span class="line"><span class="code">        a = 10;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    static void ChangeOut(out int a)</span></span><br><span class="line"><span class="code">    &#123;</span></span><br><span class="line"><span class="code">        a = 10;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line">注：C# 7.0 之前的写法使用 <span class="code">`out`</span> 必须预先声明，在 C# 7.0 及更高版本中可以使用内联声明。</span><br><span class="line"></span><br><span class="line"><span class="strong">**内联声明 (Inline declaration)：**</span>  </span><br><span class="line">这个语法允许直接在方法调用参数列表中声明新的变量，不需要预先声明 <span class="code">`index`</span> 变量，编译器会自动推断并创建这个变量。</span><br><span class="line"></span><br><span class="line"><span class="strong">**变量作用域：**</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 通过内联方式声明的 <span class="code">`index`</span> 变量</span><br><span class="line"><span class="bullet">-</span> 其作用域会扩展到包含它的代码块（如整个 if 语句块）</span><br><span class="line"><span class="bullet">-</span> 但在 if 条件判断之后，后续代码将无法访问这个变量</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Addressable</title>
      <link href="/posts/44647.html"/>
      <url>/posts/44647.html</url>
      
        <content type="html"><![CDATA[<h3 id="指定资源加载"><a href="#指定资源加载" class="headerlink" title="指定资源加载"></a>指定资源加载</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> AssetReferenceT gameObject;</span><br></pre></td></tr></table></figure><h4 id="异步加载资源"><a href="#异步加载资源" class="headerlink" title="异步加载资源"></a>异步加载资源</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步加载资源</span></span><br><span class="line">gameObject.LoadAssetAsync&lt;GameObject&gt;().Completed += (op) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (op.Status == AsyncOperationStatus.Succeeded)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//成功加载资源</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;gameObject loaded successfully&quot;</span>);</span><br><span class="line">        GameObject obj = Instantiate(op.Result);</span><br><span class="line">        material.LoadAssetAsync&lt;Material&gt;().Completed += (op1) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            obj.GetComponent&lt;MeshRenderer&gt;().material = op1.Result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//加载资源失败</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;AudioClip loading failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="异步加载场景"><a href="#异步加载场景" class="headerlink" title="异步加载场景"></a>异步加载场景</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Addressables.LoadSceneAsync(<span class="string">&quot;Lesson1&quot;</span>, UnityEngine.SceneManagement.LoadSceneMode.Single, <span class="literal">false</span>).Completed += (op) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (op.Status == AsyncOperationStatus.Succeeded)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//成功加载场景</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;Scene loaded successfully&quot;</span>);</span><br><span class="line">        op.Result.ActivateAsync(); <span class="comment">//手动激活场景</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><code>UnityEngine.SceneManagement.LoadSceneMode</code>：</p><ul><li><code>Single</code>：加载新的场景时会卸载当前正在运行的所有场景  </li><li><code>Additive</code>：允许同时加载多个场景。当使用这种模式加载场景时，新的场景会被添加到当前正在运行的场景上，而不是卸载它们。这对于需要在一个场景中展示另一个场景内容的应用（如UI叠加、多人游戏中的不同玩家场景）非常有用。</li></ul></blockquote><hr><h3 id="Label标签的作用"><a href="#Label标签的作用" class="headerlink" title="Label标签的作用"></a>Label标签的作用</h3><h4 id="运用场景："><a href="#运用场景：" class="headerlink" title="运用场景："></a>运用场景：</h4><ul><li>一个帽子的建模，不同材质（用标签区分）</li><li>通过设备的性能高低来选择不同材质的图片、模型</li></ul><h4 id="通过特性限制来查找对象"><a href="#通过特性限制来查找对象" class="headerlink" title="通过特性限制来查找对象"></a>通过特性限制来查找对象</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AssetReferenceUILabelRestriction(<span class="string">&quot;gameobject&quot;</span>, <span class="string">&quot;prefab&quot;</span>)</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="异步加载多个资源"><a href="#异步加载多个资源" class="headerlink" title="异步加载多个资源"></a>异步加载多个资源</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Addressables.LoadAssetsAsync&lt;GameObject&gt;(<span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;Cube&quot;</span>, <span class="string">&quot;Sphere&quot;</span> &#125;, (op) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;, Addressables.MergeMode.Intersection).Completed += (op) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> handle <span class="keyword">in</span> op.Result)</span><br><span class="line">    &#123;</span><br><span class="line">        GameObject obj = Instantiate((GameObject)handle);</span><br><span class="line">        obj.transform.position = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">5</span> + i * <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>如果键 <code>(Cube,Red)</code> 映射的结果是 <code>([1,2,3],[1,3,4])</code>：</p><ul><li><code>None</code>：不发生合并，将使用第一个结果 <code>[1,2,3]</code></li><li><code>Union</code>：将两个结果合并为一个集合，去除重复元素 <code>[1,2,3,4]</code></li><li><code>Intersect</code>：将两个结果合并为一个集合，保留共同元素 <code>[1,3]</code></li><li><code>UseFirst</code>：只使用第一个结果 <code>[1,2,3]</code></li></ul></blockquote><hr><h3 id="AddressableMgr-脚本（封装管理类）"><a href="#AddressableMgr-脚本（封装管理类）" class="headerlink" title="AddressableMgr 脚本（封装管理类）"></a>AddressableMgr 脚本（封装管理类）</h3><details><summary>点击展开代码</summary><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.AddressableAssets;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.ResourceManagement.AsyncOperations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Script</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AddressableMgr</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> AddressableMgr _instance;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> AddressableMgr Instance </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(_instance == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    _instance = <span class="keyword">new</span> AddressableMgr();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> _instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 容器存储我们异步加载的返回值</span></span><br><span class="line">        <span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, IEnumerator&gt; Resdict = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, IEnumerator&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 异步加载资源的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadAssetAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> name, Action&lt;AsyncOperationHandle&lt;T&gt;&gt; callBack</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> KeyName = name + <span class="string">&quot;_&quot;</span> + <span class="keyword">typeof</span>(T).Name;</span><br><span class="line">            AsyncOperationHandle&lt;T&gt; handle;</span><br><span class="line">            <span class="comment">// 如果加载过资源</span></span><br><span class="line">            <span class="keyword">if</span> (Resdict.TryGetValue(KeyName, <span class="keyword">out</span> <span class="keyword">var</span> <span class="keyword">value</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                handle = (AsyncOperationHandle&lt;T&gt;)<span class="keyword">value</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 判断这个异步加载是否结束</span></span><br><span class="line">                <span class="keyword">if</span> (handle.IsDone)</span><br><span class="line">                &#123;</span><br><span class="line">                    callBack(handle);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 如果异步时没有加载完成</span></span><br><span class="line">                    handle.Completed += callBack;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 没有进行异步加载，并记录</span></span><br><span class="line">            handle = Addressables.LoadAssetAsync&lt;T&gt;(name);</span><br><span class="line">            handle.Completed += (op) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (op.Status == AsyncOperationStatus.Succeeded)</span><br><span class="line">                &#123;</span><br><span class="line">                    callBack(op);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Debug.LogError(<span class="string">&quot;异步加载资源失败&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span>(Resdict.ContainsKey(KeyName))</span><br><span class="line">                        Resdict.Remove(KeyName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            Resdict.Add(KeyName, handle);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Release</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> KeyName = name + <span class="string">&quot;_&quot;</span> + <span class="keyword">typeof</span>(T).Name;</span><br><span class="line">            <span class="keyword">if</span> (Resdict.TryGetValue(KeyName, <span class="keyword">out</span> <span class="keyword">var</span> <span class="keyword">value</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                Addressables.Release((AsyncOperationHandle&lt;T&gt;)<span class="keyword">value</span>);</span><br><span class="line">                Resdict.Remove(KeyName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 清空资源</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Resdict.Clear();</span><br><span class="line">            AssetBundle.UnloadAllAssetBundles(<span class="literal">true</span>);</span><br><span class="line">            Resources.UnloadUnusedAssets();</span><br><span class="line">            GC.Collect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><hr>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity 知识点补充</title>
      <link href="/posts/26479.html"/>
      <url>/posts/26479.html</url>
      
        <content type="html"><![CDATA[<h2 id="ScriptableObject-概述"><a href="#ScriptableObject-概述" class="headerlink" title="ScriptableObject 概述"></a>ScriptableObject 概述</h2><h3 id="是什么："><a href="#是什么：" class="headerlink" title="是什么："></a>是什么：</h3><p>Unity 提供的一个数据存储基类。</p><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ol><li><strong>数据复用</strong>（所用属性都会分配一次内存）</li><li><strong>编辑模式下的持久化</strong>，发布运行时不具备持久化特性</li><li><strong>配置文件</strong>：用于配置游戏中的数据。过去使用 JSON 配置文件，现在通过 <code>ScriptableObject</code> 在 Unity 内部进行配置，在 Inspector 窗口中进行数据设置</li></ol><h3 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h3><ul><li>减少代码拷贝时造成的内存占用  </li><li>更好地处理数据带来的多态性</li></ul><hr><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ol><li>继承 <code>ScriptableObject</code></li><li>添加特性：</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">CreateAssetMenu(fileName = <span class="string">&quot;MyDataText&quot;</span>, menuName = <span class="string">&quot;数据/MyDataText&quot;</span>, order = 1)</span>]</span><br></pre></td></tr></table></figure><ol start="3"><li>效果说明：</li></ol><ul><li><code>CreateAssetMenu</code>：在 Project 窗口右键 Create 显示的菜单</li><li><code>fileName</code>：创建的文件名</li><li><code>menuName</code>：菜单路径</li><li><code>order</code>：排序值（数组式排序）</li></ul><hr><h2 id="EditorWindow-概述"><a href="#EditorWindow-概述" class="headerlink" title="EditorWindow 概述"></a>EditorWindow 概述</h2><h3 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h3><ol><li>继承 <code>EditorWindow</code></li><li>类中添加特性：</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">MenuItem(<span class="string">&quot;Unity窗口顶部菜单栏/自定义插件&quot;</span>)</span>]</span><br></pre></td></tr></table></figure><ol start="3"><li>添加静态方法，方法体如下：</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowWindow</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    GetWindow&lt;窗口类&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用-API："><a href="#常用-API：" class="headerlink" title="常用 API："></a>常用 API：</h3><ul><li><code>GUILayout.Label</code></li><li><code>GUILayout.Button</code></li></ul><hr><h2 id="Inspector-概述"><a href="#Inspector-概述" class="headerlink" title="Inspector 概述"></a>Inspector 概述</h2><h3 id="使用步骤：-1"><a href="#使用步骤：-1" class="headerlink" title="使用步骤："></a>使用步骤：</h3><ol><li>继承 <code>Editor</code></li><li>在类外添加特性：</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">CustomEditor(typeof(修改Inspector窗口的类))</span>]</span><br></pre></td></tr></table></figure><ol start="3"><li>重写 <code>OnInspectorGUI</code> 方法，其 GUI 使用方式与 <code>EditorWindow</code> 相同。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/8.html"/>
      <url>/posts/8.html</url>
      
        <content type="html"><![CDATA[<h2 id="IPAddress-类"><a href="#IPAddress-类" class="headerlink" title="IPAddress 类"></a><code>IPAddress</code> 类</h2><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPAddress ip = IPAddress.Parse(<span class="string">&quot;118.102.111.11&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ul><li><code>127.0.0.1</code> 表示本机地址（本地回环地址）</li></ul><hr><h2 id="IPEndPoint-类"><a href="#IPEndPoint-类" class="headerlink" title="IPEndPoint 类"></a><code>IPEndPoint</code> 类</h2><h3 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPEndPoint endPoint = <span class="keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="string">&quot;118.102.111.11&quot;</span>), <span class="number">1900</span>);</span><br></pre></td></tr></table></figure><h3 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h3><ul><li>封装 IP 地址和端口号，用于网络通信的目标地址</li></ul><hr><h2 id="域名解析-DNS"><a href="#域名解析-DNS" class="headerlink" title="域名解析 (DNS)"></a>域名解析 (DNS)</h2><h3 id="获取主机名："><a href="#获取主机名：" class="headerlink" title="获取主机名："></a>获取主机名：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dns.GetHostName(); <span class="comment">// 得到本地主机名</span></span><br></pre></td></tr></table></figure><h3 id="获取域名对应的-IP-列表："><a href="#获取域名对应的-IP-列表：" class="headerlink" title="获取域名对应的 IP 列表："></a>获取域名对应的 IP 列表：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPHostEntry ipEntry = Dns.GetHostEntry(<span class="string">&quot;www.360.com&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="成员说明："><a href="#成员说明：" class="headerlink" title="成员说明："></a>成员说明：</h3><table><thead><tr><th>成员</th><th>描述</th></tr></thead><tbody><tr><td><code>ipEntry.AddressList</code></td><td>IP 地址数组</td></tr><tr><td><code>ipEntry.Aliases</code></td><td>主机的别名列表（CNAME 记录）</td></tr><tr><td><code>ipEntry.HostName</code></td><td>DNS 主机名</td></tr></tbody></table><hr><h2 id="异步获取-IP-地址"><a href="#异步获取-IP-地址" class="headerlink" title="异步获取 IP 地址"></a>异步获取 IP 地址</h2><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">GetHostEntry</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Task&lt;IPHostEntry&gt; task = Dns.GetHostEntryAsync(<span class="string">&quot;www.e5note.top&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> task;</span><br><span class="line">    IPHostEntry ipEntry = task.Result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (IPAddress ip <span class="keyword">in</span> ipEntry.AddressList)</span><br><span class="line">    &#123;</span><br><span class="line">        print(ip); <span class="comment">// 输出 IP 地址</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">string</span> <span class="keyword">alias</span> <span class="keyword">in</span> ipEntry.Aliases)</span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="keyword">alias</span>); <span class="comment">// 输出别名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print(ipEntry.HostName); <span class="comment">// 输出正式主机名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><h3 id="简要解释："><a href="#简要解释：" class="headerlink" title="简要解释："></a>简要解释：</h3><p>字符编码是人为定义的一种规则，用来将文字字符与数字（二进制）之间进行映射，以便计算机存储或传输文本。</p><h3 id="常见编码方式："><a href="#常见编码方式：" class="headerlink" title="常见编码方式："></a>常见编码方式：</h3><ul><li>ASCII（美国）</li><li>GB2312（中国）</li><li>Shift_JIS（日本）</li><li>Euc-kr（韩国）</li><li>Unicode（统一所有语言符号）</li><li>UTF-8、UTF-16、UTF-32（基于 Unicode 的实现方式）</li></ul><hr><h3 id="UTF-8-和-Unicode-的关系"><a href="#UTF-8-和-Unicode-的关系" class="headerlink" title="UTF-8 和 Unicode 的关系"></a>UTF-8 和 Unicode 的关系</h3><ul><li><strong>Unicode</strong>：是所有字符与唯一编号（码点）之间的对应集合。</li><li><strong>UTF-8</strong>：是 Unicode 的一种具体实现方式，采用变长编码规则，使用 1~4 个字节表示一个字符。</li></ul><hr><h2 id="二进制序列化"><a href="#二进制序列化" class="headerlink" title="二进制序列化"></a>二进制序列化</h2><h3 id="将基础类型转为字节数组："><a href="#将基础类型转为字节数组：" class="headerlink" title="将基础类型转为字节数组："></a>将基础类型转为字节数组：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">byte</span>[] bytes = BitConverter.GetBytes(<span class="number">1</span>); <span class="comment">// 非字符串类型转换为字节数组</span></span><br><span class="line"><span class="built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(<span class="string">&quot;hello world&quot;</span>); <span class="comment">// 字符串转为字节数组</span></span><br></pre></td></tr></table></figure><hr><h3 id="将类对象转为字节数组"><a href="#将类对象转为字节数组" class="headerlink" title="将类对象转为字节数组"></a>将类对象转为字节数组</h3><h4 id="示例类："><a href="#示例类：" class="headerlink" title="示例类："></a>示例类：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> lev;       <span class="comment">// 4 字节</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;   <span class="comment">// 字符串长度 + 实际内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">short</span> atk;     <span class="comment">// 2 字节</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> sex;      <span class="comment">// 1 字节</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转换方法："><a href="#转换方法：" class="headerlink" title="转换方法："></a>转换方法：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">byte</span>[] <span class="title">ToBytes</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">byte</span>[] bytes = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">11</span> + name.Length];</span><br><span class="line">    BitConverter.GetBytes(lev).CopyTo(bytes, <span class="number">0</span>);</span><br><span class="line">    Encoding.UTF8.GetBytes(name).CopyTo(bytes, <span class="number">4</span>);</span><br><span class="line">    BitConverter.GetBytes(atk).CopyTo(bytes, <span class="number">8</span> + name.Length);</span><br><span class="line">    BitConverter.GetBytes(sex).CopyTo(bytes, <span class="number">11</span> + name.Length);</span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二进制反序列化"><a href="#二进制反序列化" class="headerlink" title="二进制反序列化"></a>二进制反序列化</h2><h3 id="示例代码：-1"><a href="#示例代码：-1" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BitConverter.ToInt32(bytes, <span class="number">0</span>); <span class="comment">// 从字节数组中提取整型</span></span><br><span class="line">Encoding.UTF8.GetString(bytes); <span class="comment">// 从字节数组中提取字符串</span></span><br></pre></td></tr></table></figure><hr><h2 id="Socket-编程"><a href="#Socket-编程" class="headerlink" title="Socket 编程"></a>Socket 编程</h2><h3 id="创建-Socket-示例："><a href="#创建-Socket-示例：" class="headerlink" title="创建 Socket 示例："></a>创建 Socket 示例：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Socket socket = <span class="keyword">new</span> Socket(</span><br><span class="line">    AddressFamily.InterNetwork,   <span class="comment">// IPv4 协议</span></span><br><span class="line">    SocketType.Stream,            <span class="comment">// 流式套接字</span></span><br><span class="line">    ProtocolType.Tcp              <span class="comment">// 使用 TCP 协议</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="常用操作："><a href="#常用操作：" class="headerlink" title="常用操作："></a>常用操作：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">socket.Bind(endPoint);                  <span class="comment">// 绑定 IP 和端口</span></span><br><span class="line">socket.Listen(<span class="number">1024</span>);                    <span class="comment">// 开始监听连接</span></span><br><span class="line">socket.Shutdown(SocketShutdown.Both);   <span class="comment">// 禁用发送和接收功能</span></span><br><span class="line">socket.Close();                         <span class="comment">// 关闭并释放资源</span></span><br><span class="line"></span><br><span class="line">socket.Send(Encoding.UTF8.GetBytes(info)); <span class="comment">// 发送消息</span></span><br><span class="line"><span class="built_in">int</span> bytesRead = socket.Receive(message);   <span class="comment">// 接收消息，返回实际读取的字节数</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/posts/38994.html"/>
      <url>/posts/38994.html</url>
      
        <content type="html"><![CDATA[<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h4 id="类的关键字"><a href="#类的关键字" class="headerlink" title="类的关键字"></a>类的关键字</h4><ul><li><code>class</code></li></ul><h4 id="声明位置"><a href="#声明位置" class="headerlink" title="声明位置"></a>声明位置</h4><ul><li>在 <code>namespace</code> 语句块中声明</li></ul><h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><ul><li>类中声明的方法</li></ul><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ol><li>名字和类名一致</li><li>可以实现函数的重载</li><li>默认有一个无参的构造函数</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">People p1 = <span class="keyword">new</span> People(); <span class="comment">// 默认有一个无参构造函数 </span></span><br><span class="line"><span class="comment">// 当你写了一个有参的构造函数时，默认的无参构造函数就被顶掉了</span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">People</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        Age = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造函数，调用（“Unknown”, age）版本</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span>(<span class="params"><span class="built_in">int</span> age</span>) : <span class="title">this</span>(<span class="params"><span class="string">&quot;Unknown&quot;</span>, age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造函数，调用无参构造函数后设置具体名称与年龄</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>) : <span class="title">this</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><ul><li>当垃圾真正被回收的时候，才会执行的函数：<code>~People() &#123; &#125;</code></li></ul><h4 id="垃圾回收机制-GC"><a href="#垃圾回收机制-GC" class="headerlink" title="垃圾回收机制 (GC)"></a>垃圾回收机制 (GC)</h4><ol><li>垃圾回收的过程中遍历堆（Heap）上动态分配的所有对象</li><li>通过识别它们是否被引用来确定哪些对象是垃圾，哪些对象仍被引用</li><li>所谓的垃圾就是没有任何变量、对象引用的内容</li></ol><blockquote><p><strong>注意</strong>：GC 只负责堆（Heap）上的垃圾回收（因为引用类型在堆上存储），栈（Stack）上的由系统自动管理。</p></blockquote><blockquote><p><strong>原理</strong>：0、1、2 代内存</p></blockquote><ul><li>所有的新对象都会被分配在 <strong>0 代内存</strong> 中，0 代满时触发 GC。0 代中非垃圾的对象会移到 <strong>1 代内存</strong> 中；1 代满了，会触发 0、1 代的 GC，并将非垃圾的对象放到 <strong>2 代内存</strong> 中；2 代满了，就会触发 0、1、2 代的 GC。</li></ul><blockquote><p><strong>注意</strong>：不会对大对象进行搬迁，85KB（85000 字节）以上的对象为大对象，直接存储在 2 代内存里。</p></blockquote><h4 id="成员属性"><a href="#成员属性" class="headerlink" title="成员属性"></a>成员属性</h4><p>基本概念：</p><ol><li>用于保护成员变量</li><li>为成员属性的获取和赋值添加逻辑处理</li><li>解决 3P（Public、Private、Protected）的局限性</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> sex;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> C_Score;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Unity_Score;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">bool</span> sex, <span class="built_in">int</span> age, <span class="built_in">float</span> C_Score, <span class="built_in">float</span> Unity_Score</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.C_Score = C_Score;</span><br><span class="line">        <span class="keyword">this</span>.Unity_Score = Unity_Score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有成员方法，计算总成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> Sum</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> C_Score + Unity_Score;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sex)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;我叫 <span class="subst">&#123;name&#125;</span>，今年 <span class="subst">&#123;age&#125;</span> 岁了，是男同学，我的总成绩是：<span class="subst">&#123;Sum&#125;</span>，平均成绩是：<span class="subst">&#123;Sum / <span class="number">2f</span>&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;我叫 <span class="subst">&#123;name&#125;</span>，今年 <span class="subst">&#123;age&#125;</span> 岁了，是女同学，我的总成绩是：<span class="subst">&#123;Sum&#125;</span>，平均成绩是：<span class="subst">&#123;Sum / <span class="number">2f</span>&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员属性 Age，带逻辑检查</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">value</span> &gt; <span class="number">150</span> || <span class="keyword">value</span> &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;年龄必须是 0-150 岁之间&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                age = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员属性 Score，带逻辑检查</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Score</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> C_Score + Unity_Score;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">value</span> &gt; <span class="number">100</span> || <span class="keyword">value</span> &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;成绩必须是 0-100 之间&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                C_Score = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a>索引器</h4><p>使对象可以像数组一样访问：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Person&gt; friends = <span class="keyword">new</span> List&lt;Person&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 索引器：通过索引访问 friends 列表</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (friends == <span class="literal">null</span> || index &gt;= friends.Count)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> friends[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfRangeException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= friends.Count)</span><br><span class="line">            &#123;</span><br><span class="line">                friends.Add(<span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                friends[index] = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>);</span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;Bob&quot;</span>, <span class="number">24</span>);</span><br><span class="line">    Person p3 = <span class="keyword">new</span> Person(<span class="string">&quot;Charlie&quot;</span>, <span class="number">23</span>);</span><br><span class="line">    p1.friends.Add(p2);</span><br><span class="line">    p1.friends.Add(p3);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;&#123;0&#125;, &#123;1&#125;&quot;</span>, p1[<span class="number">0</span>].Name, p1[<span class="number">1</span>].Name);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;&#123;0&#125;, &#123;1&#125;&quot;</span>, p1[<span class="number">0</span>].Age, p1[<span class="number">1</span>].Age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态成员（static）"><a href="#静态成员（static）" class="headerlink" title="静态成员（static）"></a>静态成员（static）</h3><p>特点：可以通过类名访问，与程序同生共死。</p><h3 id="静态构造函数"><a href="#静态构造函数" class="headerlink" title="静态构造函数"></a>静态构造函数</h3><ul><li>特点：不能使用访问修饰符、没有参数、只会调用一次。</li><li>作用：初始化静态成员。</li></ul><h3 id="拓展方法"><a href="#拓展方法" class="headerlink" title="拓展方法"></a>拓展方法</h3><blockquote><p>注意：只能写在静态类里。</p></blockquote><p>为已有类添加新方法，而无需修改原类定义。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问修饰符 static 返回值 函数名(this 拓展类名 参数名, 参数类型 参数名)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayHello</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;这是我为 string 拓展出的一个方法，我叫 &quot;</span> + name + <span class="string">&quot;，今年 &quot;</span> + age + <span class="string">&quot; 岁！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就为 <code>string</code> 类拓展出了一个 <code>SayHello()</code> 的成员方法，当你实例化一个 <code>string</code> 类型的对象时，就可以通过该对象调用此方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">name.SayHello(<span class="number">18</span>);</span><br></pre></td></tr></table></figure><h3 id="运算符的拓展"><a href="#运算符的拓展" class="headerlink" title="运算符的拓展"></a>运算符的拓展</h3><p>让自定义类和对象能够像基本类型一样进行运算。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> x;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span>(<span class="params"><span class="built_in">float</span> x, <span class="built_in">float</span> y</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载加号运算符，让两个 Point 相加得到新的坐标</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Point <span class="keyword">operator</span> +(Point p1, Point p2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Point(p1.x + p2.x, p1.y + p2.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;坐标为(&quot;</span> + x + <span class="string">&quot;, &quot;</span> + y + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用：让自定义的类和对象实现运算。</p><hr><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="里氏替换"><a href="#里氏替换" class="headerlink" title="里氏替换"></a>里氏替换</h4><p>所有的父类都可以用子类来表示，用父类容器来装子类对象：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">GameObject</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Enemy</span> : <span class="title">GameObject</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Item</span> : <span class="title">GameObject</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GameObject[] objects = &#123; <span class="keyword">new</span> Enemy(), <span class="keyword">new</span> Item(), <span class="keyword">new</span> GameObject() &#125;;</span><br></pre></td></tr></table></figure><h4 id="is-和-as"><a href="#is-和-as" class="headerlink" title="is 和 as"></a>is 和 as</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Item item1 = <span class="keyword">new</span> Item();</span><br><span class="line">GameObject gameObject = <span class="keyword">new</span> GameObject();</span><br></pre></td></tr></table></figure><ul><li><code>is</code>：判断一个对象的类型是否是对应的类，例如：<code>item1 is GameObject</code> 返回 <code>True</code>。</li><li><code>as</code>：转换，例如：<code>item1 as GameObject</code> 将 <code>item1</code> 转换成 <code>GameObject</code> 类型对象（如果无法转换则返回 <code>null</code>）。</li></ul><h4 id="继承中的构造函数"><a href="#继承中的构造函数" class="headerlink" title="继承中的构造函数"></a>继承中的构造函数</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Monster</span> : <span class="title">Player</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 子类的构造函数在执行时会自动调用父类的无参构造函数，</span></span><br><span class="line">    <span class="comment">// 但如果父类没有默认构造函数，则会报错。解决方法：使用 base 关键字调用指定的父类构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Monster</span>(<span class="params"><span class="built_in">string</span> Name, <span class="built_in">int</span> HP, <span class="built_in">int</span> Attack, <span class="built_in">int</span> Defence</span>) </span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">Name, HP, Attack, Defence</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="特有名词解释"><a href="#特有名词解释" class="headerlink" title="特有名词解释"></a>特有名词解释</h4><ul><li><p><strong>装箱和拆箱</strong>：</p><ul><li>装箱（Boxing）：将值类型（如 <code>int</code>、<code>struct</code> 等）放到堆上，变成引用类型。</li><li>拆箱（Unboxing）：将堆上的引用类型转换回值类型。</li><li>特点：频繁装箱&#x2F;拆箱会影响性能。</li></ul></li><li><p><strong>密封类（sealed）</strong>：子类不可再被其他类继承。关键字：<code>sealed</code>。</p></li></ul><hr><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><h4 id="virtual、override、base"><a href="#virtual、override、base" class="headerlink" title="virtual、override、base"></a>virtual、override、base</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Duck</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;嘎嘎嘎&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">WoodDuck</span> : <span class="title">Duck</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Say(); <span class="comment">// 调用父类的方法</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;吱吱吱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对父类方法的重写，实现多态（同一个函数在不同的对象上有不同表现）。</p><h4 id="抽象类（abstract）"><a href="#抽象类（abstract）" class="headerlink" title="抽象类（abstract）"></a>抽象类（abstract）</h4><ul><li><p>特点：</p><ol><li>不能被实例化</li><li>可以包含抽象方法</li><li>继承抽象类必须用 <code>override</code> 重写所有抽象方法</li></ol></li><li><p>抽象函数</p><ul><li><p>特点：</p><ol><li>只能在抽象类中声明</li><li>没有方法体</li><li>不能是私有的</li><li>继承后必须用 <code>override</code> 重写</li></ol></li></ul></li></ul><h4 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h4><ol><li>接口不包含成员变量</li><li>只包含方法、属性、索引器、事件</li><li>成员不能被实现（只有声明）</li><li>成员可以不用写访问修饰符，但不能是私有的</li><li>接口不能继承类，但可以继承另一个接口</li></ol>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Where Are We Going?</title>
      <link href="/posts/41657.html"/>
      <url>/posts/41657.html</url>
      
        <content type="html"><![CDATA[<p><strong>where are we going?</strong><br>我们将去往何方？</p><hr><p><strong>I’m going to the dock later to order some French fries.</strong><br>我打算待会去码头整点薯条。</p><hr><p><strong>No, you misunderstood…</strong><br>不，你误会了……</p><hr><p><strong>I mean, what is the ultimate goal of our life?</strong><br>我的意思是，我们这一辈子的终极目标，到底是为了什么？</p><hr><p><strong>What’s your opinion?</strong><br>你觉得呢？</p><hr><p><strong>I…</strong><br>我……</p><hr><p><strong>I don’t think it’s going to the North Pole to see the aurora.</strong><br>我觉得一定不是去北极看极光。</p><hr><p><strong>Your story sounds a little strange.</strong><br>你的故事听起来好像有点奇怪。</p><hr><p><strong>You have fulfilled your long-standing dream, and broken through all obstacles.</strong><br>你完成了长久以来的梦想，冲破了一切阻碍。</p><hr><p><strong>Why do you still feel so painful?</strong><br>为什么你还觉得如此痛苦？</p><hr><p><strong>I really felt great satisfaction at the bottom of my heart.</strong><br>我的心底确实感受到了巨大的满足。</p><hr><p><strong>But almost in an instant.</strong><br>但几乎就是在瞬间之间。</p><hr><p><strong>I felt the endless nothingness.</strong><br>我就感受到了无尽的虚无。</p><hr><p><strong>What did the aurora bring to me?</strong><br>看到极光给我带来什么了吗？</p><hr><p><strong>There seems to be nothing.</strong><br>好像什么也没有。</p><hr><p><strong>I still clearly remember the palpitation in my heart when I dreamed of seeing the aurora as a child, but when I grew up, the throbbing became lighter and lighter.</strong><br>我至今仍然清晰地记得我小时候梦想着看到极光时那份心中的悸动，但是长大后，那份悸动却越来越淡。</p><hr><p><strong>I was overwhelmed by life, and was no longer able to complete the so-called dream.</strong><br>我被生活压得喘不过气来，再也无力去完成那所谓的梦想。</p><hr><p><strong>But when I buried my dream, my heart was unwilling.</strong><br>但是当我埋葬我的梦想时，我的心却不甘。</p><hr><p><strong>So, I’ve tried my best, and came here with the body that, I didn’t know how long I could live, I long for the aurora to bring me an eternal meaning, so that I can fight (against) life bravely.</strong><br>所以，我拼尽了全力，带着不知道还能活多久的躯壳来到这里，我渴望极光能给我带来一个永恒的意义，让我可以去勇敢的对抗生活。</p><hr><p><strong>But that doesn’t exist.</strong><br>但那是不存在的。</p><hr><p><strong>It has no meaning at all.</strong><br>它什么意义也没有。</p><hr><p><strong>My life will not change, and my story will not fly to the blue sky.</strong><br>我的生活不会有任何改变，我的故事也不会飞向蓝天。</p><hr><p><strong>In that case, what is the meaning of life?</strong><br>既然如此，生活还有什么意义呢？</p><hr><p><strong>The dream that can be moved for it will be dull after it is realized.</strong><br>能够为之心动的梦想在实现之后便索然无味。</p><hr><p><strong>All our pursuits will turn into nothingness in the end.</strong><br>我们所有的追求到了最后都会化为虚无。</p><hr><p><strong>Why should we pursue it?</strong><br>那我们为什么还要追求呢？</p><hr><p><strong>So, I’m not going to go on.</strong><br>所以，我不打算继续走下去了。</p><hr><p><strong>Since life has no meaning, let me go.</strong><br>既然生命没有任何意义，那就让我离去吧。</p><hr><p><strong>Let me go to the abyss, to embrace the eternal nothingness, to embrace the eternal death.</strong><br>让我走向深渊，去拥抱永恒的虚无，去拥抱永恒的死亡。</p><hr><p><strong>Don’t lie to yourself.</strong><br>别骗自己了。</p><hr><p><strong>Deep in your heart, you’re not here to see the aurora.</strong><br>在你的内心深处，你并不是为了看极光而来的。</p><hr><p><strong>You just want to escape, in order to escape your present, past and future life.</strong><br>你只是想逃避，想逃避你的现在、过去以及未来的生活。</p><hr><p><strong>But after escaping?</strong><br>可是在逃避之后呢？</p><hr><p><strong>You still have to come back and face everything.</strong><br>你还是要回来面对一切。</p><hr><p><strong>You don’t just want to give up because life is meaningless, you’re afraid, fear of how you will spend your painful and hopeless life in the future.</strong><br>你并不只是因为生命没有意义而想要放弃，你在害怕，害怕你未来痛苦且没有希望的人生将要如何度过。</p><hr><p><strong>In the past, you put hopes for the future on something that seems meaningful and valuable - watching the aurora.</strong><br>过去的你将对未来的希望寄托在一个看起来很有意义有价值的事情上——看极光。</p><hr><p><strong>But that’s just a mirage.</strong><br>可那不过是镜花水月而已。</p><hr><p><strong>When you really realize this, you surrender to life since watching the aurora is meaningless, why continue to live?</strong><br>当你真正意识到这一点时，你就对生活彻底投降了。既然看极光没有意义，那为什么还要继续生活呢？</p><hr><p><strong>But it is because the world has no meaning in the present, in the past or in the future, and because life has no meaning in the first place, that we are freed from the illusion, and are able to be real with the world of nothingness.</strong><br>正因世界的现在、过去、将来都不存在意义，正因生命本就无所意义，我们才得以从幻梦中解脱，得以真正的去面对这个虚无的世界。</p><hr><p><strong>Leave meaning behind, it doesn’t matter.</strong><br>将意义抛下吧，那根本不重要。</p><hr><p><strong>It is only after all the old ideas have been broken down and reorganized that we can be reborn.</strong><br>在一切旧的思想被打碎重组后，我们才会得以新生。</p><hr><p><strong>So, to go back to the roots of everything, to do something in order to do it.</strong><br>回到一切的根源上去吧，为了做某件事情而去做。</p><hr><p><strong>The meaning of life is no reason, not need any meaning, do what you want, live in every present moment that must come, be free from the control and torture of meaning, then fight against this nihilistic, cruel and painful life till the last second, dance in every painful and meaningless day, and finally fall in love with life bravely.</strong><br>生命的意义就是没有任何理由、也无需任何意义，做自己想做的事，活在每一个必将到来的当下，不受意义的控制与折磨，然后与这虚无、残酷、而又痛苦的生活斗争到最后一秒，在每一个痛苦且没有意义的日子中起舞，最后勇敢地爱上生活。</p><hr><p><strong>Isn’t that the most courageous and worthy thing in the world?</strong><br>这不才是这个世界最有勇气，最值得奋斗的事情吗？</p><hr><p><strong>So, your answer is?</strong><br>所以你的答案是？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活哲理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity 知识点补充</title>
      <link href="/posts/26479.html"/>
      <url>/posts/26479.html</url>
      
        <content type="html"><![CDATA[<h2 id="认识模型"><a href="#认识模型" class="headerlink" title="认识模型"></a>认识模型</h2><h3 id="关键名词："><a href="#关键名词：" class="headerlink" title="关键名词："></a>关键名词：</h3><ul><li><p><strong>UV</strong><br>是纹理贴图坐标的简称，包含 U 轴和 V 轴，类似于空间中的 X、Y、Z 轴。纹理坐标中的每一个点都与 3D 模型上的位置信息相对应。</p></li><li><p><strong>纹理</strong><br>一张二维图片，用于给模型表面提供颜色或细节信息。</p></li><li><p><strong>贴图</strong><br>将纹理通过 UV 坐标映射到 3D 物体表面的过程。</p></li><li><p><strong>纹理贴图</strong><br>包含模型的颜色信息和 UV 信息。</p></li><li><p><strong>材质</strong><br>材质决定了模型的表现效果，它使用纹理贴图，并结合不同的着色器算法来呈现不同视觉风格。</p></li><li><p><strong>Shader（着色器）</strong><br>控制材质最终表现效果的程序代码，决定光照、颜色、反射等视觉特性。</p></li></ul><hr><h3 id="Sprite-Editor-单张图片编辑"><a href="#Sprite-Editor-单张图片编辑" class="headerlink" title="Sprite Editor 单张图片编辑"></a>Sprite Editor 单张图片编辑</h3><blockquote><p>可以在 Unity 中通过 Sprite Editor 对图片进行切割、设置网格、生成精灵动画等操作。</p></blockquote><hr><h2 id="瓦片地图之等距瓦片设置"><a href="#瓦片地图之等距瓦片设置" class="headerlink" title="瓦片地图之等距瓦片设置"></a>瓦片地图之等距瓦片设置</h2><h3 id="设置步骤："><a href="#设置步骤：" class="headerlink" title="设置步骤："></a>设置步骤：</h3><ol><li><p>打开 <code>Project Settings</code> &#x3D;&gt; <code>Graphics</code><br>设置 Custom Axis 为：<code>(0, 1, -0.26)</code></p></li><li><p>在 Tilemap 中设置渲染模式为：  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mode: Individual</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="效应器（Effectors）"><a href="#效应器（Effectors）" class="headerlink" title="效应器（Effectors）"></a>效应器（Effectors）</h2><p>Unity 提供多种 2D 物理效应器组件，用于模拟特定物理行为：</p><ul><li><strong>区域效应器</strong>：<code>Area Effector 2D</code></li><li><strong>浮力效应器</strong>：<code>Buoyancy Effector 2D</code></li><li><strong>点效应器</strong>：<code>Point Effector 2D</code>（如黑洞）</li><li><strong>平台效应器</strong>：<code>Platform Effector 2D</code>（跳跃平台）</li><li><strong>表面效应器</strong>：<code>Surface Effector 2D</code>（如传送带）</li></ul><hr><h2 id="其他常用组件"><a href="#其他常用组件" class="headerlink" title="其他常用组件"></a>其他常用组件</h2><ul><li><p><strong>拖尾效果</strong>：<br>使用 <code>Trail Renderer</code> 组件实现物体移动时的拖尾轨迹。</p></li><li><p><strong>恒定力</strong>：<br>使用 <code>Constant Force 2D</code> 组件为刚体施加一个持续的力。</p></li></ul><hr><h2 id="动画（Animation）"><a href="#动画（Animation）" class="headerlink" title="动画（Animation）"></a>动画（Animation）</h2><h3 id="常用动画控制方法（假设-anim-为-Animator-类型）："><a href="#常用动画控制方法（假设-anim-为-Animator-类型）：" class="headerlink" title="常用动画控制方法（假设 anim 为 Animator 类型）："></a>常用动画控制方法（假设 <code>anim</code> 为 <code>Animator</code> 类型）：</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>anim.Play(&quot;动画名字&quot;);</code></td><td>直接播放指定名称的动画</td></tr><tr><td><code>anim.CrossFade(&quot;动画名称&quot;);</code></td><td>淡入切换到指定动画</td></tr><tr><td><code>anim.PlayQueued(&quot;动画名称&quot;);</code></td><td>当前动画播放完成后播放下一个动画</td></tr><tr><td><code>anim.Stop();</code></td><td>停止所有正在播放的动画</td></tr><tr><td><code>anim.wrapMode = WrapMode.Loop;</code></td><td>设置动画循环播放</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
